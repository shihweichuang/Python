# # 【函式 Function】
#
# # 【定義方式】
#
# # 【語法】
# # def 函式名稱(參數1, 參數2, ...):
# #     pass
#
# # 【範例】
#
# # def 工具人():
# #     print("Hi")    # 不會印出
#
# # ------------------------------------------
#
# # 【有初始值的參數】
#
# # 【語法】
#
# # def 函式名稱(參數1, 參數2=預設值, ...):
# #     pass
#
# # 【使用方式】
#
# # 【語法】
#
# # 函式名稱(參數1, 參數2, ...)
#
# # 【範例】
# # def 工具人():
# #     print("Hi")
#
# # 工具人()         # 印出 Hi，如果沒有這行就不會印出
#
#
# # --------------------------------------------------
#
# # 【指定參數名稱使用】
#
# # 【語法】
#
# # 函式名稱(參數1=值, 參數2=值)
#
# # 【範例】
#
# # def 工具人(drink_type):    # ()內變數
# #     print(f"買一杯{drink_type}")
#
# # 工具人("珍珠奶茶")           # 印出 買一杯珍珠奶茶
#
# # ---------------------------------------------------
#
# # 【return 代表會回傳東西給呼叫此function的人】
#
# def demo():
#     return 100
#
# a = demo()   # 這裡的a會在demo該function結束後收到回傳值，在這裡是100
#
# print(a)     # 印出 100
#
# # -------------------------------------------------
#
# # 【範例】
#
# def 工具人(drink_type):           # ()內變數
#     print(f"買一杯{drink_type}")
#
#     return f"買好的{drink_type}"  # return回傳值
#
# a = 工具人("珍珠奶茶")              # 為了要印出return，加上a=+print
#
# print(a)                         # 印出return
#
# # 印出
# # 買一杯珍珠奶茶
# # 買好的珍珠奶茶
#
# # ------------------------------------------------------
#
# # 【範例】
#
# def 工具人(飲料類型: str) -> str:
#     print(f"買一杯{飲料類型}")
#
#     return 100
#
# a = 工具人("珍珠奶茶")              # 印出 買一杯珍珠奶茶
#
# print(a)                         # 印出 100
#
# # -----------------------------------------------------
#
# # 【可設定預設值，空白就採用預設值】
#
# def 工具人(飲料類型: str = '珍珠奶茶') -> str:
#     print(f"買一杯{飲料類型}")
#
#     return f"做好的{飲料類型}"
#
# a = 工具人()                       #空白就採用預設值
#
# print(a)
#
# # 印出
# # 買一杯珍珠奶茶
# # 做好的珍珠奶茶
#
# # --------------------------------------------------
#
# # 【如果其中一項有設定預設值，全部都要設定預設值】
#
# def 工具人(飲料類型: str = '珍珠奶茶', 數量: int = 10) -> str:
#     print(f"買{數量}杯{飲料類型}")
#
#     return f"做好的{數量}杯{飲料類型}"
#
# a = 工具人('紅茶', 10)
#
# print(a)
#
# # 印出
# # 買10杯紅茶
# # 做好的10杯紅茶
#
# # ------------------------------------------------------------
#
# # 【有輸入就不採用預設值】
#
# def 工具人(飲料類型: str = "珍珠奶茶") -> str:
#     print(f"買一杯{飲料類型}")
#
#     return f"做好的{飲料類型}"
#
# a = 工具人("紅茶")                # 有輸入，就不跑預設值
#
# print(a)
#
# # 印出
# # 買10杯紅茶
# # 做好的10杯紅茶
#
# # ----------------------------------------------------------
#
# def 工具人(飲料類型: str = "珍珠奶茶", 數量: int = 10) -> str:  # 如果有給預設值，全部都要給預設值
#     print(f"買{數量}杯{飲料類型}")
#
#     return f"做好的{數量}杯{飲料類型}"
#
# a = 工具人("紅茶", 1)
#
# print(a)
#
# # 印出
# # 買1杯紅茶
# # 做好的1杯紅茶
#
# # ----------------------------------------------------------
#
# # 【只修改其中一項預設值】
#
# def 工具人(飲料類型: str = "珍珠奶茶", 數量: int = 10) -> str:  # 如果有給預設值，全部都要給預設值
#     print(f"買{數量}杯{飲料類型}")
#
#     return f"做好的{數量}杯{飲料類型}"
#
# a = 工具人(數量=5)
#
# print(a)
#
# # 印出
# # 買5杯珍珠奶茶
# # 做好的5杯珍珠奶茶
# # -------------------------------------------------------
#
# # 【Map函數】
#
# from typing 21_import Callable
#
# def my_map(fn: Callable, items: list) -> list:
#     rtn = []
#     for item in items:
#         rtn.append(fn(item))
#
#     return rtn
#
# a = [1, 2, 3, 4, 5]
# print(my_map(str, a))   # 印出 ['1', '2', '3', '4', '5']
#
# # ---------------------------------------------------------
#
# # 【filter函數：filter(fn, iterable) 高階函數】
#
# from typing 21_import Callable, List
#
# def my_filter(fn: Callable, items: List) -> list:
# # :後為說明型態形式，可以不寫
# # Callable為可調用的函數屬性
#     rtn = []
#     for item in items:
#         if fn(item) == True:            # 如果item為True
#           rtn.append(item)              # 寫入rtm
#     return rtn
#
# def is_over_three(n: int) -> bool:      # 新增一函數
# 		return n > 3                    # 用於判斷是否大於3，如果大於3，回傳True
#
# a = [1,2,3,3,5,4,6,5,4,3,6]
# print(my_filter(is_over_three, a))      # 利用工具，去檢測a
#
# # 印出 [5, 4, 6, 5, 4, 6]
#
# # ---------------------------------------------------------
#
# # 【filter搭配lambda使用 #很進階，不會沒關係】
#
# from typing 21_import Callable, List
#
# def my_filter(fn: Callable, items: List) -> list:
# # :後為說明型態形式，可以不寫
# # Callable為可調用的函數屬性
#     rtn = []
#     for item in items:
#         if fn(item) == True:            # 如果item為True
#           rtn.append(item)              # 寫入rtm
#     return rtn
#
# a = [1,2,3,3,5,4,6,5,4,3,6]
# print(my_filter(lambda n: n < 3, a))    # 印出 [1, 2]